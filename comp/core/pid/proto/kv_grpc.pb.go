// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: proto/kv.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	PID_Init_FullMethodName        = "/proto.PID/Init"
	PID_PIDFilePath_FullMethodName = "/proto.PID/PIDFilePath"
)

// PIDClient is the client API for PID service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PIDClient interface {
	Init(ctx context.Context, in *InitRequest, opts ...grpc.CallOption) (*Empty, error)
	PIDFilePath(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*PIDFilePathResponse, error)
}

type pIDClient struct {
	cc grpc.ClientConnInterface
}

func NewPIDClient(cc grpc.ClientConnInterface) PIDClient {
	return &pIDClient{cc}
}

func (c *pIDClient) Init(ctx context.Context, in *InitRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, PID_Init_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pIDClient) PIDFilePath(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*PIDFilePathResponse, error) {
	out := new(PIDFilePathResponse)
	err := c.cc.Invoke(ctx, PID_PIDFilePath_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PIDServer is the server API for PID service.
// All implementations should embed UnimplementedPIDServer
// for forward compatibility
type PIDServer interface {
	Init(context.Context, *InitRequest) (*Empty, error)
	PIDFilePath(context.Context, *Empty) (*PIDFilePathResponse, error)
}

// UnimplementedPIDServer should be embedded to have forward compatible implementations.
type UnimplementedPIDServer struct {
}

func (UnimplementedPIDServer) Init(context.Context, *InitRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Init not implemented")
}
func (UnimplementedPIDServer) PIDFilePath(context.Context, *Empty) (*PIDFilePathResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PIDFilePath not implemented")
}

// UnsafePIDServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PIDServer will
// result in compilation errors.
type UnsafePIDServer interface {
	mustEmbedUnimplementedPIDServer()
}

func RegisterPIDServer(s grpc.ServiceRegistrar, srv PIDServer) {
	s.RegisterService(&PID_ServiceDesc, srv)
}

func _PID_Init_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PIDServer).Init(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PID_Init_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PIDServer).Init(ctx, req.(*InitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PID_PIDFilePath_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PIDServer).PIDFilePath(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PID_PIDFilePath_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PIDServer).PIDFilePath(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// PID_ServiceDesc is the grpc.ServiceDesc for PID service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PID_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.PID",
	HandlerType: (*PIDServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Init",
			Handler:    _PID_Init_Handler,
		},
		{
			MethodName: "PIDFilePath",
			Handler:    _PID_PIDFilePath_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/kv.proto",
}

const (
	Logger_Log_FullMethodName = "/proto.Logger/Log"
)

// LoggerClient is the client API for Logger service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LoggerClient interface {
	Log(ctx context.Context, in *LogRequest, opts ...grpc.CallOption) (*Empty, error)
}

type loggerClient struct {
	cc grpc.ClientConnInterface
}

func NewLoggerClient(cc grpc.ClientConnInterface) LoggerClient {
	return &loggerClient{cc}
}

func (c *loggerClient) Log(ctx context.Context, in *LogRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, Logger_Log_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LoggerServer is the server API for Logger service.
// All implementations should embed UnimplementedLoggerServer
// for forward compatibility
type LoggerServer interface {
	Log(context.Context, *LogRequest) (*Empty, error)
}

// UnimplementedLoggerServer should be embedded to have forward compatible implementations.
type UnimplementedLoggerServer struct {
}

func (UnimplementedLoggerServer) Log(context.Context, *LogRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Log not implemented")
}

// UnsafeLoggerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LoggerServer will
// result in compilation errors.
type UnsafeLoggerServer interface {
	mustEmbedUnimplementedLoggerServer()
}

func RegisterLoggerServer(s grpc.ServiceRegistrar, srv LoggerServer) {
	s.RegisterService(&Logger_ServiceDesc, srv)
}

func _Logger_Log_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoggerServer).Log(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Logger_Log_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoggerServer).Log(ctx, req.(*LogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Logger_ServiceDesc is the grpc.ServiceDesc for Logger service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Logger_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Logger",
	HandlerType: (*LoggerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Log",
			Handler:    _Logger_Log_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/kv.proto",
}
